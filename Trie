from collections import defaultdict
class Trie():
    def __init__(self):
        self.trie = {}

    def append(self, string):
        new_pointer = self.trie
        for letter in string:
            new_pointer = new_pointer.setdefault(letter, {})

T = Trie()
s = "AAAA"
T.append(s)






from collections import defaultdict
class Trie2:
  available = 1
  def __init__(self):
    self.label = str(Trie.available)
    self.child_nodes = defaultdict(Trie)
    Trie.available += 1

  def add_child(self, child):
    if not child: return
    self.child_nodes[child[0]].add_child(child[1:])

T = Trie2()
s=["AAAA"]
T.add_child(s)
